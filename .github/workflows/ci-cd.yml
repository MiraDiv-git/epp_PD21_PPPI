name: CI/CD Pipeline

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  deployments: write

env:
  NODE_VERSION: '20.x'
  NODE_ENV: 'test'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Restore npm cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          node_modules
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-

    - name: Install dependencies
      run: npm ci

    - name: Run tests with JUnit reporter
      run: npm test -- --reporter mocha-junit-reporter --reporter-options mochaFile=report.xml || true

    - name: Upload test report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: junit-test-report
        path: report.xml
        retention-days: 7

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: List build contents
      run: ls -la dist/

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: app-build
        path: dist/
        retention-days: 7

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    environment:
      name: staging
      url: https://staging-hello-world.example.com

    env:
      API_URL: https://api.staging.example.com
      DEPLOY_ENV: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: app-build
        path: ./deploy-artifact

    - name: Verify build artifacts
      run: |
        echo "Build artifacts contents:"
        ls -la ./deploy-artifact/
        echo "Node.js version in build:"
        cat ./deploy-artifact/package.json | grep version

    - name: Simulate deployment
      env:
        DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        SERVER_URL: ${{ vars.STAGING_SERVER_URL }}
      run: |
        echo "üöÄ Starting deployment to ${{ github.environment }}..."
        echo "üì¶ Build artifacts downloaded successfully"
        echo "üîê Using deploy token: ${DEPLOY_TOKEN:0:8}****"
        echo "üåê Server URL: ${SERVER_URL}"
        echo "üìÅ Deployment package size: $(du -sh ./deploy-artifact)"
        echo "‚úÖ Deployment simulation completed successfully!"

        # –°–∏–º—É–ª—è—Ü—ñ—è –¥–µ–ø–ª–æ—é
        echo "üìã Deployment checklist:"
        echo "  ‚úì Build artifacts verified"
        echo "  ‚úì Environment: $DEPLOY_ENV"
        echo "  ‚úì API endpoint: $API_URL"
        echo "  ‚úì Security token validated"
        echo "  ‚úì Ready for production promotion"
